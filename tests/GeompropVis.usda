#usda 1.0
(
    defaultPrim = "root"
    metersPerUnit = 0.01
    upAxis = "Z"
)

def Xform "root"
{
    def Scope "Materials"
    {
        over "MaterialX" (
            prepend references = @GeompropVis.mtlx@</MaterialX>
        )
        {
        }
    }

    def Xform "Rect"
    {
        token visibility = "invisible"

        def Mesh "mesh"
        {
            float3[] extent = [(-0.45, -0.45, 0), (0.45, 0.45, 0)]
            int[] faceVertexCounts = [3, 3]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5] (
            )
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "vertex"
            )
            point3f[] points = [(-0.45, -0.45, 0), (0.45, -0.45, 0), (0.45, 0.45, 0), (-0.45, -0.45, 0), (0.45, 0.45, 0), (-0.45, 0.45, 0)]
            float3[] primvars:color0 = [(1, 0, 0), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1)] (
                interpolation = "vertex"
            )
            float3[] primvars:tangents = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "vertex"
            )
            float[] primvars:tangentSigns = [1, 1, 1, 1, 1, 1] (
                interpolation = "vertex"
            )
            color3f[] primvars:displayColor = [(1, 0, 0), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1)] (
                interpolation = "vertex"
            )
            texCoord2f[] primvars:st0 = [(0, 0), (1, 0), (1, 1), (0, 0), (1, 1), (0, 1)] (
                interpolation = "vertex"
            )
            texCoord2f[] primvars:st1 = [(1, 1), (0, 1), (0, 0), (1, 1), (0, 0), (1, 0)] (
                interpolation = "vertex"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Position_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, 4.4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_position_node>
        }
    }

    def Xform "Position_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, 4.4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_position_geomprop>
        }
    }

    def Xform "Normal_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, 2.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_normal_node>
        }
    }

    def Xform "Normal_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, 2.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_normal_geomprop>
        }
    }

    def Xform "Tangent_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, 0.6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_tangent_node>
        }
    }

    def Xform "Tangent_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, 0.6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_tangent_geomprop>
        }
    }

    def Xform "Bitangent_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, -1.3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_bitangent_node>
        }
    }

    def Xform "Bitangent_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, -1.3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_bitangent_geomprop>
        }
    }

    def Xform "TexCoord0_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, -3.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_texcoord0_node>
        }
    }

    def Xform "TexCoord0_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, -3.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_texcoord0_geomprop>
        }
    }

    def Xform "TexCoord1_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, -5.1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_texcoord1_node>
        }
    }

    def Xform "TexCoord1_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, -5.1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_texcoord1_geomprop>
        }
    }

    def Xform "GeomColor_Node" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (0.75, 0, -7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_geomcolor_node>
        }
    }

    def Xform "GeomColor_GeomProp" (
        append references = </root/Rect>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (2, 2, 2)
        double3 xformOp:translate = (3.25, 0, -7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_geomcolor_geomprop>
        }
    }

    def Camera "T_Camera"
    {
        float3 xformOp:rotateXYZ = (90, 0, 0)
        double3 xformOp:translate = (-0.2, -15, -0.75)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
        float2 clippingRange = (1, 20)
        float focalLength = 50
        float horizontalAperture = 36
        token projection = "perspective"
        float verticalAperture = 60
    }

    def Xform "Label"
    {
        token visibility = "invisible"

        def Mesh "mesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [3, 3]
            int[] faceVertexIndices = [0, 1, 2, 0, 3, 1]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1.8742199, 0.36997545, 0), (1.8742197, -0.36997545, 0), (-1.8742199, -0.36997545, 0), (1.8742197, 0.36997545, 0)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Label_Position" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, 4.4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.87), (0.9, 0.98), (0, 0.98), (0, 0.87), (0.9, 0.87), (0.9, 0.98)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_Normal" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, 2.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.76), (0.9, 0.88), (0, 0.88), (0, 0.76), (0.9, 0.76), (0.9, 0.88)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_Tangent" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, 0.6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.65), (0.9, 0.77), (0, 0.77), (0, 0.65), (0.9, 0.65), (0.9, 0.77)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_Bitangent" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, -1.3)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.54), (0.9, 0.665), (0, 0.665), (0, 0.54), (0.9, 0.54), (0.9, 0.665)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_TexCoord0" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, -3.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.43), (0.9, 0.56), (0, 0.56), (0, 0.43), (0.9, 0.43), (0.9, 0.56)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_TexCoord1" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, -5.1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.33), (0.9, 0.46), (0, 0.46), (0, 0.33), (0.9, 0.33), (0.9, 0.46)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Label_GeomColor" (
        append references = </root/Label>
    )
    {
        token visibility = "visible"
        float3 xformOp:rotateXYZ = (-90.00001, 0, 0)
        float3 xformOp:scale = (1, 1.4865851, 1)
        double3 xformOp:translate = (-2.75, 0, -7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        over "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>

            texCoord2f[] primvars:st = [(0, 0.22), (0.9, 0.35), (0, 0.35), (0, 0.22), (0.9, 0.22), (0.9, 0.35)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Xform "Column_Nodes"
    {
        float3 xformOp:rotateXYZ = (-90.00001, 0, 0)
        float3 xformOp:scale = (1, 1.3514405, 1)
        double3 xformOp:translate = (0.75, 0, 6.070740699768066)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [3, 3]
            int[] faceVertexIndices = [0, 1, 2, 0, 3, 1]
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1.0709033, 0.36997557, 0), (1.0709033, -0.36997557, 0), (-1.0709033, -0.36997557, 0), (1.0709033, 0.36997557, 0)]
            texCoord2f[] primvars:st = [(0.025, 0.11), (0.975, 0.24), (0.025, 0.24), (0.025, 0.11), (0.975, 0.11), (0.975, 0.24)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Column_GeomProps"
    {
        float3 xformOp:rotateXYZ = (-90.00001, 0, 0)
        float3 xformOp:scale = (1, 1.3514405, 1)
        double3 xformOp:translate = (3.25, 0, 6.070740699768066)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [3, 3]
            int[] faceVertexIndices = [0, 1, 2, 0, 3, 1]
            rel material:binding = </root/Materials/MaterialX/Materials/M_label>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1.0709033, 0.36997557, 0), (1.0709033, -0.36997557, 0), (-1.0709033, -0.36997557, 0), (1.0709033, 0.36997557, 0)]
            texCoord2f[] primvars:st = [(0.025, 0), (0.975, 0.13), (0.025, 0.13), (0.025, 0), (0.975, 0), (0.975, 0.13)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }
}

