#usda 1.0
(
    defaultPrim = "Asset"
    doc = "Converted from glTF with guc 0.5"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Asset" (
    customData = {
        string generator = "glTF Asset Generator"
        string version = "2.0"
    }
    kind = "component"
)
{
    def Scope "Materials"
    {
        def "UsdPreviewSurface"
        {
            def "Materials"
            {
                def Material "mat"
                {
                    token outputs:surface.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node.outputs:surface>

                    def Shader "node"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node1.outputs:rgb>
                        color3f inputs:emissiveColor = (0, 0, 0)
                        float inputs:metallic.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node3.outputs:b>
                        normal3f inputs:normal
                        float inputs:occlusion
                        float inputs:roughness.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node5.outputs:g>
                        token outputs:surface
                    }

                    def Shader "node1"
                    {
                        uniform token info:id = "UsdUVTexture"
                        float4 inputs:fallback = (1, 1, 1, 1)
                        asset inputs:file = @BaseColor_Plane.png@
                        float4 inputs:scale = (0.2, 0.2, 0.2, 0.8)
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node2.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "node2"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "node3"
                    {
                        uniform token info:id = "UsdUVTexture"
                        float4 inputs:fallback = (1, 1, 1, 1)
                        asset inputs:file = @MetallicRoughness_Plane.png@
                        float4 inputs:scale = (0, 0, 0, 0)
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node4.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float outputs:b
                    }

                    def Shader "node4"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }

                    def Shader "node5"
                    {
                        uniform token info:id = "UsdUVTexture"
                        float4 inputs:fallback = (1, 1, 1, 1)
                        asset inputs:file = @MetallicRoughness_Plane.png@
                        float4 inputs:scale = (0, 0, 0, 0)
                        token inputs:sourceColorSpace = "raw"
                        float2 inputs:st.connect = </Asset/Materials/UsdPreviewSurface/Materials/mat/node6.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float outputs:g
                    }

                    def Shader "node6"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        string inputs:varname = "st"
                        float2 outputs:result
                    }
                }
            }
        }

        def "MaterialX"
        {
            def "Materials"
            {
                def Material "mat"
                {
                    float inputs:alpha
                    float inputs:alpha_cutoff
                    int inputs:alpha_mode
                    color3f inputs:attenuation_color
                    float inputs:attenuation_distance
                    color3f inputs:base_color
                    float inputs:clearcoat
                    float3 inputs:clearcoat_normal
                    float inputs:clearcoat_roughness
                    color3f inputs:emissive
                    float inputs:emissive_strength
                    float inputs:ior
                    float inputs:iridescence
                    float inputs:iridescence_ior
                    float inputs:iridescence_thickness
                    float inputs:metallic
                    float3 inputs:normal
                    float inputs:occlusion
                    float inputs:roughness
                    color3f inputs:sheen_color
                    float inputs:sheen_roughness
                    float inputs:specular
                    color3f inputs:specular_color
                    float3 inputs:tangent
                    float inputs:thickness
                    float inputs:transmission
                    token outputs:mtlx:surface.connect = </Asset/Materials/MaterialX/Materials/mat/SR_mat.outputs:surface>

                    def Shader "SR_mat" (
                        prepend references = </Asset/Materials/MaterialX/Shaders/SR_mat>
                    )
                    {
                        float inputs:alpha.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:alpha>
                        float inputs:alpha_cutoff.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:alpha_cutoff>
                        int inputs:alpha_mode.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:alpha_mode>
                        color3f inputs:attenuation_color.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:attenuation_color>
                        float inputs:attenuation_distance.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:attenuation_distance>
                        color3f inputs:base_color.connect = </Asset/Materials/MaterialX/Materials/mat/NG_mat.outputs:out_node6>
                        float inputs:clearcoat.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:clearcoat>
                        float3 inputs:clearcoat_normal.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:clearcoat_normal>
                        float inputs:clearcoat_roughness.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:clearcoat_roughness>
                        color3f inputs:emissive.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:emissive>
                        float inputs:emissive_strength.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:emissive_strength>
                        float inputs:ior.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:ior>
                        float inputs:iridescence.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:iridescence>
                        float inputs:iridescence_ior.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:iridescence_ior>
                        float inputs:iridescence_thickness.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:iridescence_thickness>
                        float inputs:metallic.connect = </Asset/Materials/MaterialX/Materials/mat/NG_mat.outputs:out_node10>
                        float3 inputs:normal.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:normal>
                        float inputs:occlusion.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:occlusion>
                        float inputs:roughness.connect = </Asset/Materials/MaterialX/Materials/mat/NG_mat.outputs:out_node14>
                        color3f inputs:sheen_color.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:sheen_color>
                        float inputs:sheen_roughness.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:sheen_roughness>
                        float inputs:specular.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:specular>
                        color3f inputs:specular_color.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:specular_color>
                        float3 inputs:tangent.connect = </Asset/Materials/MaterialX/Materials/mat/NG_mat.outputs:out_node17>
                        float inputs:thickness.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:thickness>
                        float inputs:transmission.connect = </Asset/Materials/MaterialX/Materials/mat.inputs:transmission>
                    }

                    def "NG_mat" (
                        prepend references = </Asset/Materials/MaterialX/NodeGraphs/NG_mat>
                    )
                    {
                    }
                }
            }

            def "Shaders"
            {
                def Shader "SR_mat"
                {
                    uniform token info:id = "ND_gltf_pbr_surfaceshader"
                    token outputs:surface
                }
            }

            def "NodeGraphs"
            {
                def NodeGraph "NG_mat"
                {
                    color3f outputs:out_node6.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node6.outputs:out>
                    float outputs:out_node10.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node10.outputs:out>
                    float outputs:out_node14.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node14.outputs:out>
                    float3 outputs:out_node17.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node17.outputs:out>

                    def Shader "node1"
                    {
                        uniform token info:id = "ND_geompropvalue_color3"
                        color3f inputs:default = (1, 1, 1) (
                            colorSpace = "lin_rec709"
                        )
                        string inputs:geomprop = "color"
                        color3f outputs:out
                    }

                    def Shader "node2"
                    {
                        uniform token info:id = "ND_multiply_color3"
                        color3f inputs:in1.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node1.outputs:out>
                        color3f inputs:in2 = (0.2, 0.2, 0.2)
                        color3f outputs:out
                    }

                    def Shader "node3"
                    {
                        uniform token info:id = "ND_image_color4"
                        color4f inputs:default = (1, 1, 1, 1) (
                            colorSpace = "lin_rec709"
                        )
                        asset inputs:file = @BaseColor_Plane.png@ (
                            colorSpace = "srgb_texture"
                        )
                        float2 inputs:texcoord.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node4.outputs:out>
                        string inputs:uaddressmode = "periodic"
                        string inputs:vaddressmode = "periodic"
                        color4f outputs:out
                    }

                    def Shader "node4"
                    {
                        uniform token info:id = "ND_geompropvalue_vector2"
                        string inputs:geomprop = "st"
                        float2 outputs:out
                    }

                    def Shader "node5"
                    {
                        uniform token info:id = "ND_convert_color4_color3"
                        color4f inputs:in.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node3.outputs:out>
                        color3f outputs:out
                    }

                    def Shader "node6"
                    {
                        uniform token info:id = "ND_multiply_color3"
                        color3f inputs:in1.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node2.outputs:out>
                        color3f inputs:in2.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node5.outputs:out>
                        color3f outputs:out
                    }

                    def Shader "node7"
                    {
                        uniform token info:id = "ND_image_vector3"
                        float3 inputs:default = (1, 1, 1)
                        asset inputs:file = @MetallicRoughness_Plane.png@
                        float2 inputs:texcoord.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node8.outputs:out>
                        string inputs:uaddressmode = "periodic"
                        string inputs:vaddressmode = "periodic"
                        float3 outputs:out
                    }

                    def Shader "node8"
                    {
                        uniform token info:id = "ND_geompropvalue_vector2"
                        string inputs:geomprop = "st"
                        float2 outputs:out
                    }

                    def Shader "node9"
                    {
                        uniform token info:id = "ND_extract_vector3"
                        float3 inputs:in.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node7.outputs:out>
                        int inputs:index = 2
                        float outputs:out
                    }

                    def Shader "node10"
                    {
                        uniform token info:id = "ND_multiply_float"
                        float inputs:in1.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node9.outputs:out>
                        float inputs:in2 = 0
                        float outputs:out
                    }

                    def Shader "node11"
                    {
                        uniform token info:id = "ND_image_vector3"
                        float3 inputs:default = (1, 1, 1)
                        asset inputs:file = @MetallicRoughness_Plane.png@
                        float2 inputs:texcoord.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node12.outputs:out>
                        string inputs:uaddressmode = "periodic"
                        string inputs:vaddressmode = "periodic"
                        float3 outputs:out
                    }

                    def Shader "node12"
                    {
                        uniform token info:id = "ND_geompropvalue_vector2"
                        string inputs:geomprop = "st"
                        float2 outputs:out
                    }

                    def Shader "node13"
                    {
                        uniform token info:id = "ND_extract_vector3"
                        float3 inputs:in.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node11.outputs:out>
                        int inputs:index = 1
                        float outputs:out
                    }

                    def Shader "node14"
                    {
                        uniform token info:id = "ND_multiply_float"
                        float inputs:in1.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node13.outputs:out>
                        float inputs:in2 = 0
                        float outputs:out
                    }

                    def Shader "node15"
                    {
                        uniform token info:id = "ND_geompropvalue_vector3"
                        string inputs:geomprop = "tangents"
                        float3 outputs:out
                    }

                    def Shader "node16"
                    {
                        uniform token info:id = "ND_transformvector_vector3"
                        string inputs:fromspace = "object"
                        float3 inputs:in.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node15.outputs:out>
                        string inputs:tospace = "world"
                        float3 outputs:out
                    }

                    def Shader "node17"
                    {
                        uniform token info:id = "ND_normalize_vector3"
                        float3 inputs:in.connect = </Asset/Materials/MaterialX/NodeGraphs/NG_mat/node16.outputs:out>
                        float3 outputs:out
                    }
                }
            }
        }
    }

    def Xform "Scenes"
    {
        def Xform "scene"
        {
            def Xform "node"
            {
                def Xform "mesh"
                {
                    def Mesh "submesh" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
                        int[] faceVertexCounts = [3, 3]
                        int[] faceVertexIndices = [1, 0, 3, 1, 3, 2]
                        rel material:binding = </Asset/Materials/MaterialX/Materials/mat>
                        rel material:binding:preview = </Asset/Materials/UsdPreviewSurface/Materials/mat>
                        normal3f[] normals = [(0, 0, 1), (0, 0, 1)] (
                            customData = {
                                dictionary guc = {
                                    bool generated = 1
                                }
                            }
                            interpolation = "uniform"
                        )
                        point3f[] points = [(0.5, -0.5, 0), (-0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0)]
                        float3[] primvars:color = [(0, 0, 1), (1, 0, 0), (0, 0, 1), (1, 0, 0)] (
                            interpolation = "vertex"
                        )
                        color3f[] primvars:displayColor = [(0, 0, 0.2), (0.2, 0, 0), (0, 0, 0.2), (0.2, 0, 0)] (
                            interpolation = "vertex"
                        )
                        texCoord2f[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1)] (
                            interpolation = "vertex"
                        )
                        uniform token subdivisionScheme = "none"
                    }
                }
            }
        }
    }
}

